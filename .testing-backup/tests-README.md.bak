# MIDI Song Creation Tool Testing Suite

This directory contains all tests for the MIDI Song Creation Tool project.

## Directory Structure

- `e2e/`: End-to-end tests using Playwright
- `integration/`: Integration tests that test multiple components together
- `unit/`: Unit tests for individual components and functions
- `fixtures/`: Test fixtures and sample data
- `mocks/`: Mock implementations for testing

## Recent Updates

We've addressed several issues in the testing suite:

1. Fixed the TransportControls test that was creating duplicate elements
2. Improved module resolution with better Jest configuration
3. Added proper mocks for SessionContext, API services, and other dependencies
4. Created convenient testing scripts for specific components

## Running Tests

Use the following scripts to run tests:

- `npm run test:unit`: Run all unit tests
- `npm run test:integration`: Run all integration tests
- `npm run test:e2e`: Run all end-to-end tests
- `npm run test:coverage`: Run tests with coverage reports

For debugging specific components:

- `./scripts/test-pianoroll.sh`: Test just the PianoRoll component
- `./scripts/run-all-tests.sh`: Run all component tests

## Adding New Tests

When adding new tests, follow these conventions:

1. Use Jest and Testing Library for component testing
2. Follow the naming convention `ComponentName.test.jsx` for component tests
3. Use mocks from the `tests/mocks` directory for consistency
4. Test both happy paths and error cases
5. Clean up after each test to avoid state leakage

## Mocks

We use the following mocks for testing:

- `SessionContextMock.js`: Mock implementation of the SessionContext
- `apiService.js`: Mock implementation of the API service
- `transportService.js`: Mock implementation of the transport service
- `styleMock.js`: Mock for CSS imports
- `fileMock.js`: Mock for file imports

## Test Coverage

We aim for the following coverage targets:

- Core modules: 80% statements, 70% branches, 80% functions, 80% lines
- Server modules: 75% statements, 65% branches, 75% functions, 75% lines
- Overall project: 70% statements, 60% branches, 70% functions, 70% lines